package boardgame;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 * BoardGame base class.
 * This is a sub-class of JFrame (basically a window.)
 * 
 * BoardGame GUI hierarchy
 * +--------------------------------------------+
 * |                                            |
 * | board JPanel                               |
 * |                                            |
 * | contains pieces[][]                        |
 * |                                            |
 * | each element is a clickable JButton        |
 * |                                            |
 * +--------------------------------------------+
 * |                                            |
 * | output JTextArea embedded in a JScrollPane |
 * |                                            |
 * +--------------------------------------------+
 * 
 * @since Nov 2018
 * @author Michael FUNG
 */
public class BoardGame extends JFrame implements ActionListener {

    // fields can be inherited and used in subclasses
    protected int xCount;
    protected int yCount;
    protected JButton[][] pieces;

    protected JPanel      board;
    protected JTextArea   output;
    
    public boolean verbose = true; // generate more or less output
    
    public BoardGame()
    {
        initializeBoardGame(3, 3);
    }
    
    public BoardGame(int xCount, int yCount)
    {
        initializeBoardGame(xCount, yCount);
    }
    
    final protected void initializeBoardGame(int xCount, int yCount)
    {
        // copy parameters to instance fields and create pieces buttons
        this.xCount = xCount;
        this.yCount = yCount;
        pieces = new JButton[xCount][yCount];

        // adjust this JFrame object layout
        this.setTitle("BoardGame " + xCount + "x" + yCount);
        this.setLayout(new GridBagLayout());
        GridBagConstraints layoutConstraints = new GridBagConstraints();
        
        // prepare board panel
        board = new JPanel();
        board.setLayout(new GridLayout(yCount, xCount));
        board.setPreferredSize(new Dimension(xCount * 80, yCount * 80));

        // create pieces buttons on board
        for (int y = 0; y < yCount; y++)
            for (int x = 0; x < xCount; x++)
            {
                pieces[x][y] = new JButton("(R" + x + ", C" + y + ")");
                pieces[x][y].setActionCommand(x + "," + y);
                pieces[x][y].setFocusable(false);
                
                // register this BoardGame object as ActionListener "on button click"
                pieces[x][y].addActionListener(this);

                // add this piece to GridLayout top-to-bottom, left-to-right
                board.add(pieces[x][y]);
            }

        // add board panel to this JFrame object
        layoutConstraints.gridx = 0;
        layoutConstraints.gridy = 0;
        layoutConstraints.weightx = 1;
        layoutConstraints.weighty = 1;
        layoutConstraints.anchor = GridBagConstraints.CENTER;
        layoutConstraints.fill   = GridBagConstraints.BOTH;
        this.add(board, layoutConstraints);
        
        // prepare output textarea
        output = new JTextArea();
        output.setText("Output TextArea:");
        JScrollPane scrollTextPane = new JScrollPane(output);
        scrollTextPane.setPreferredSize(new Dimension(100, 120));

        // add output textarea to this JFrame object
        layoutConstraints.gridx = 0;
        layoutConstraints.gridy = 1;
        layoutConstraints.weightx = 1;
        layoutConstraints.weighty = 0;
        layoutConstraints.anchor = GridBagConstraints.SOUTH;
        layoutConstraints.fill   = GridBagConstraints.HORIZONTAL;
        this.add(scrollTextPane, layoutConstraints);        
        
        // adjust this JFrame object properties
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(true);
        this.pack();
        
        // invoke a standalone overridable method for different boardgame
        initGame();
    }
    
    /**
     * This is a callback method on button click (for all pieces).
     * @param actionObject is generated by the system
     */
    @Override
    public void actionPerformed(ActionEvent actionObject) {
        if (actionObject.getSource() instanceof JButton)
        {
            JButton triggeredButton = (JButton) actionObject.getSource();
            
            if (verbose)
                addLineToOutput("Clicked " + triggeredButton.getActionCommand() + 
                                " button " + triggeredButton.getText());
            
            // invoke a standalone overridable method for different boardgame
            gameAction(triggeredButton);
        }
    }
    
    /**
     * Add a line to output JTextArea, scroll to the end to show latest content.
     * @param str is a line of text to append
     */
    protected void addLineToOutput(String str)
    {
        output.append("\n");
        output.append(str);
        output.setCaretPosition(output.getDocument().getLength());
    }

    /***********************************************************************
     * Students are expected to inherit and override the following methods
     **********************************************************************/
    
    /**
     * This method initializes a game, e.g., setting up pieces labels, setting scores, etc.
     * This method is to be overridden and defined in sub-classes for different games.
     */
    protected void initGame()
    {
        pieces[0][0].setText("DEMO");
        pieces[0][0].setForeground(Color.RED);

        pieces[2][1].setText("Exit!");
        pieces[2][1].setForeground(Color.GREEN);

        Random rng = new Random();
            
        pieces[rng.nextInt(xCount)][yCount-1].setText("???");

    }

    /**
     * This method implements game actions.
     * This method is to be overridden and defined in sub-classes for different games.
     * This method is invoked by the general actionPerformed() callback method.
     * @param triggeredButton is the button clicked by the user
     */
    protected void gameAction(JButton triggeredButton)
    {
        // EXAMPLE action to introduce cute behaviour on clicking DEMO button
        if (triggeredButton.getActionCommand().equals("0,0"))
        {
            pieces[xCount-1][yCount-1].setText("Oops!");
            
            Random rng = new Random();
            
            pieces[rng.nextInt(xCount)][rng.nextInt(yCount)].setForeground(Color.BLUE);
        }
        else
            // EXAMPLE action to disable the clicked button
            triggeredButton.setEnabled(false);
        
        // DEMO action on clicking Exit! at pieces[2][1]
        if (triggeredButton.getActionCommand().equals("2,1"))
        {
            addLineToOutput("Game ended!");
            JOptionPane.showMessageDialog(null, "Game ended!");
            System.exit(0);
        }
    }
    
    /**
     * BoardGame main() DEMO.
     * Demonstrates how to start new boardgames.
     * @param args 
     */
    public static void main(String[] args) {
        // create a DEMO board of width x height = 7 x 5 at screen coord (300, 100)
        BoardGame baseGame;
        baseGame = new BoardGame(7, 5);
        baseGame.setLocation(300, 100);
        
        // create a default DEMO board of 3x3 at (0, 0)
        BoardGame baseGame3x3 = new BoardGame();
    }
    
}
